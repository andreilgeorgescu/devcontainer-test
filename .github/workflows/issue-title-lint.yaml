name: PR Title Linter

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions: read-all

jobs:
  lint-pr-title:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install Python dependencies
        run: pip install requests PyGithub

      - name: Lint PR Title
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          import os
          import re
          from github import Github

          # Initialize GitHub client
          g = Github(os.getenv('GITHUB_TOKEN'))

          # Fetch the PR details
          repo_name = os.getenv('GITHUB_REPOSITORY')
          pr_number = os.getenv('GITHUB_EVENT_PATH').split('/')[-1]
          repo = g.get_repo(repo_name)
          pr = repo.get_pull(int(pr_number))

          # Regex for title validation
          title_regex = r'^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-z0-9-]+\))?:\s[a-z0-9\s-]+[a-z0-9\s]\n\nResolves #\d+$'

          # Check if PR title matches the regex
          if not re.match(title_regex, pr.title):
              print("PR title does not match the required format")
              exit(1)

          # Extract issue number from PR title
          issue_number = re.search(r'Resolves #(\d+)$', pr.title).group(1)

          # Fetch the issue title
          issue = repo.get_issue(int(issue_number))

          # Compare PR title and issue title
          if pr.title != issue.title:
              print("PR title does not match the issue title")
              exit(1)

          print("PR title is valid")
